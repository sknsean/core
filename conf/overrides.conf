OVERRIDES = "local\
:MACHINE_${MACHINE}\
:DISTRO_${DISTRO}\
:__TARGET__:TARGET_CPU_${TARGET_CPU}:TARGET_OS_${TARGET_OS}\
:__HOST__:HOST_CPU_${HOST_CPU}:HOST_OS_${HOST_OS}\
:__BUILD__:BUILD_CPU_${BUILD_CPU}:BUILD_OS_${BUILD_OS}\
:${RECIPE_TYPE}\
"
OVERRIDES[nohash] = True
#TARGET_OVERRIDES = ":TARGET_CPU_${TARGET_CPU}:TARGET_OS_${TARGET_OS}"
#TARGET_OVERRIDES:native = ""

addhook early_overrides_fixup to post_conf_parse
def early_overrides_fixup(d):
    overrides = (d.get("OVERRIDES", 0) or "").split(":")
    overrides_changed = False
    machine = d.get("MACHINE")
    distro = d.get("DISTRO")
    for override in overrides:
        if override == "MACHINE_${MACHINE}" and not machine:
            overrides.remove("MACHINE_${MACHINE}")
            overrides_changed = True
            continue
        if override == "DISTRO_${DISTRO}" and not distro:
            overrides.remove("DISTRO_${DISTRO}")
            overrides_changed = True
            continue
    if overrides_changed:
        d.set("OVERRIDES", ":".join(overrides))
    return

addhook late_overrides_fixup to post_recipe_parse first after arch_update before set_useflags
def late_overrides_fixup(d):
    overrides = (d.get("OVERRIDES", 0) or "").split(":")
    overrides_changed = False
    if (d.get("TARGET_ARCH") != d.get("MACHINE_ARCH") and
        "MACHINE_${MACHINE}" in overrides):
        overrides.remove("MACHINE_${MACHINE}")
    for type in ('BUILD', 'HOST', 'TARGET'):
        if type == 'BUILD':
            real_type = type
        else:
            real_type = d.get(type + '_TYPE').upper()
        os = d.get(type + '_OS')
        families = d.get(real_type + '_CPU_FAMILIES')
        index = overrides.index('__%s__'%(type))
        del overrides[index]
        def add_override(name):
            overrides.insert(index, "%s_%s"%(type, name))
        if os:
            if os.startswith("linux-gnu"):
                add_override("KERNEL_linux")
                add_override("LIBC_glibc")
                add_override("BINFMT_elf")
            elif "linux-uclibc" in os:
                add_override("KERNEL_linux")
                add_override("LIBC_uclibc")
                if os.startswith("uclinux"):
                    add_override("BINFMT_flat")
                elif "fdpic" in os:
                    add_override("BINFMT_fdpic")
                else:
                    add_override("BINFMT_elf")
            elif "linux-musl" in os:
                add_override("KERNEL_linux")
                add_override("LIBC_musl")
                add_override("BINFMT_elf")
            elif os.startswith("darwin"):
                add_override("KERNEL_darwin")
            elif os.startswith("mingw"):
                add_override("LIBC_mingw")
        if families:
            d.set(type + '_CPU_FAMILIES', families)
            families = families.split()
            families.reverse()
            for family in families:
                overrides.insert(index, type + '_CPU_${%s_CPU}_%s'%
                                 (type, family))
        cpu = d.get(type + '_CPU')
        if re.match('i\d86', cpu):
            overrides.insert(overrides.index('%s_CPU_${%s_CPU}'%(type, type)) + 1,
                             '%s_CPU_x86'%(type))
            overrides.insert(overrides.index('%s_CPU_${%s_CPU}'%(type, type)) + 1,
                             '%s_CPU_x86_32'%(type))
        if cpu == 'x86_64':
            overrides.insert(overrides.index('%s_CPU_${%s_CPU}'%(type, type)) + 1,
                             '%s_CPU_x86'%(type))
    d.set("OVERRIDES", ":".join(overrides))
    return
